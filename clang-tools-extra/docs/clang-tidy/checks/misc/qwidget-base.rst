.. title:: clang-tidy - misc-qwidget-base

misc-qwidget-base
======================

Checks whether the persistence and model components do not derive from or use QWidgets,
and in case of the view component, checks whether it has QWidget as base class.

In a correct architecture setup the persistence and model layers belong strictly to the backend,
so they are not supposed to use any GUI elements, or be of such kind.
On the contrary, the view layer is responsible for the display, so it must be derived from QWidget.

For each of the persistence and model components, 4 matchers are added:
1. Binds all C++ record declarations that are defining a class,
match the regular expression of the model/persistence component and derive from QWidget
(not necessarily directly), except when the class name starts with ``Ui_``
(classes with this prefix are generated by the uic tool)

.. code-block:: c++

  class Model : public QWidget {};

2. Binds all fields in C++ record declarations that are defining a class,
match the regular expression of the model/persistence component,
except when the class name starts with ``Ui_``,
and the field is or derives from QWidget

.. code-block:: c++
  class Model {
    QWidget MyWidget;
  };

3. Binds all C++ method declarations that are defining a method of classes that match
the model/persistence component's regular expression, except when the class name starts with ``Ui_``,
and anywhere inside their AST there is a variable (including function parameters)
that is or is derived from QWidget, including references and pointers

.. code-block:: c++
  class Derived : public QWidget {};
  class MyPersistence {
    void fun1 (Derived & D, QPushButton * B) {
      QWidget Var;
    };

4. Binds all C++ method declarations that are defining a method of classes that match
the model/persistence component's regular expression, except when the class name starts with ``Ui_``,
and their return type is or is derived from QWidget, including references and pointers

.. code-block:: c++
  class Model {
    QWidget * getWidget();
  };

For the view component, only one matcher is registered.
It binds all C++ record declarations that are defining a class,
match the regular expression of the view component, except if it is derived from QWidget,
or when the name of the class or any of its bases starts with ``Ui_``

.. code-block:: c++
  class View : public QObject {};

All matched nodes are reported to the diagnostics with the corresponding explanation.
